
import string

########################## Python code #################################

octree_origin = [-0.679300, 0.011761, -0.708207]
octree_edge = 1.556990
morton_codes = [268435456, 268435457, 268435458, 268435459, 268435460, 268435461, 268435462, 268435463, 268435464, 268435465, 268435466, 268435467, 268435468, 268435469, 268435470, 268435471, 268435472, 268435473, 268435474, 268435475, 268435476, 268435477, 268435478, 268435479, 268435480, 268435481, 268435482, 268435483, 268435484, 268435485, 268435486, 268435487, 268435488, 268435489, 268435490, 268435491, 268435492, 268435493, 268435494, 268435495, 268435496, 268435497, 268435498, 268435499, 268435500, 268435501, 268435502, 268435503, 268435504, 268435505, 268435506, 268435507, 268435508, 268435509, 268435510, 268435511, 268435512, 268435513, 268435514, 268435515, 268435516, 268435517, 268435518, 268435519]
sdfs = [0.616994, 0.359684, 0.522449, 0.382769, 0.312858, 0.103385, 0.233371, 0.055832, 0.359684, 0.339449, 0.382769, 0.230014, 0.103385, 0.008797, 0.055832, -0.144088, 0.522449, 0.382769, 0.499216, 0.416889, 0.233371, 0.055832, 0.231687, 0.051222, 0.382769, 0.230014, 0.416889, 0.320378, 0.055832, -0.144088, 0.051222, 0.028761, 0.312858, 0.103385, 0.233371, 0.055832, 0.240252, 0.006535, 0.115779, -0.136694, 0.103385, 0.008797, 0.055832, -0.144088, 0.006535, 0.052458, -0.136694, -0.259407, 0.233371, 0.055832, 0.231687, 0.051222, 0.115779, -0.136694, 0.042241, -0.179385, 0.055832, -0.144088, 0.051222, 0.028761, -0.136694, -0.259407, -0.179385, -0.160694, 0.339449, 0.394225, 0.230014, 0.314758, 0.008797, 0.080004, -0.144088, -0.034998, 0.394225, 0.568333, 0.314758, 0.508971, 0.080004, 0.285395, -0.034998, 0.241276, 0.230014, 0.314758, 0.320378, 0.384681, -0.144088, -0.034998, 0.028761, 0.074428, 0.314758, 0.508971, 0.384681, 0.556533, -0.034998, 0.241276, 0.074428, 0.291348, 0.008797, 0.080004, -0.144088, -0.034998, 0.052458, 0.025569, -0.259407, -0.236362, 0.080004, 0.285395, -0.034998, 0.241276, 0.025569, 0.155228, -0.236362, 0.025026, -0.144088, -0.034998, 0.028761, 0.074428, -0.259407, -0.236362, -0.160694, -0.119544, -0.034998, 0.241276, 0.074428, 0.291348, -0.236362, 0.025026, -0.119544, 0.208698, 0.499216, 0.416889, 0.280698, 0.141573, 0.231687, 0.051222, 0.189183, 0.069110, 0.416889, 0.320378, 0.141573, 0.416638, 0.051222, 0.028761, 0.069110, 0.146284, 0.280698, 0.141573, 0.233263, 0.126454, 0.189183, 0.069110, 0.275861, 0.239354, 0.141573, 0.416638, 0.126454, 0.339024, 0.069110, 0.146284, 0.239354, 0.019083, 0.231687, 0.051222, 0.189183, 0.069110, 0.042241, -0.179385, 0.035867, -0.036607, 0.051222, 0.028761, 0.069110, 0.146284, -0.179385, -0.160694, -0.036607, 0.205950, 0.189183, 0.069110, 0.275861, 0.239354, 0.035867, -0.036607, 0.362161, 0.270183, 0.069110, 0.146284, 0.239354, 0.019083, -0.036607, 0.205950, 0.270183, 0.269174, 0.320378, 0.384681, 0.416638, 0.518546, 0.028761, 0.074428, 0.146284, 0.313230, 0.384681, 0.556533, 0.518546, 0.718392, 0.074428, 0.291348, 0.313230, 0.495966, 0.416638, 0.518546, 0.339024, 0.466740, 0.146284, 0.313230, 0.019083, 0.336894, 0.518546, 0.718392, 0.466740, 0.786194, 0.313230, 0.495966, 0.336894, 0.713026, 0.028761, 0.074428, 0.146284, 0.313230, -0.160694, -0.119544, 0.205950, 0.216472, 0.074428, 0.291348, 0.313230, 0.495966, -0.119544, 0.208698, 0.216472, 0.430536, 0.146284, 0.313230, 0.019083, 0.336894, 0.205950, 0.216472, 0.269174, 0.512285, 0.313230, 0.495966, 0.336894, 0.713026, 0.216472, 0.430536, 0.512285, 0.738032, 0.240252, 0.006535, 0.115779, -0.136694, 0.332171, 0.088715, 0.275141, 0.127840, 0.006535, 0.052458, -0.136694, -0.259407, 0.088715, 0.043256, 0.127840, -0.003558, 0.115779, -0.136694, 0.042241, -0.179385, 0.275141, 0.127840, 0.123281, 0.131372, -0.136694, -0.259407, -0.179385, -0.160694, 0.127840, -0.003558, 0.131372, 0.127796, 0.332171, 0.088715, 0.275141, 0.127840, 0.595342, 0.470402, 0.587404, 0.497535, 0.088715, 0.043256, 0.127840, -0.003558, 0.470402, 0.403809, 0.497535, 0.370684, 0.275141, 0.127840, 0.123281, 0.131372, 0.587404, 0.497535, 0.459769, 0.439453, 0.127840, -0.003558, 0.131372, 0.127796, 0.497535, 0.370684, 0.439453, 0.422144, 0.052458, 0.025569, -0.259407, -0.236362, 0.043256, 0.135218, -0.003558, 0.047428, 0.025569, 0.155228, -0.236362, 0.025026, 0.135218, 0.330647, 0.047428, 0.287886, -0.259407, -0.236362, -0.160694, -0.119544, -0.003558, 0.047428, 0.127796, 0.131327, -0.236362, 0.025026, -0.119544, 0.208698, 0.047428, 0.287886, 0.131327, 0.345310, 0.043256, 0.135218, -0.003558, 0.047428, 0.403809, 0.480072, 0.370684, 0.401367, 0.135218, 0.330647, 0.047428, 0.287886, 0.480072, 0.655944, 0.401367, 0.583910, -0.003558, 0.047428, 0.127796, 0.131327, 0.370684, 0.401367, 0.422144, 0.462332, 0.047428, 0.287886, 0.131327, 0.345310, 0.401367, 0.583910, 0.462332, 0.620367, 0.042241, -0.179385, 0.035867, -0.036607, 0.123281, 0.131372, 0.179359, 0.178912, -0.179385, -0.160694, -0.036607, 0.205950, 0.131372, 0.127796, 0.178912, 0.345816, 0.035867, -0.036607, 0.362161, 0.270183, 0.179359, 0.178912, 0.453239, 0.420533, -0.036607, 0.205950, 0.270183, 0.269174, 0.178912, 0.345816, 0.420533, 0.592161, 0.123281, 0.131372, 0.179359, 0.178912, 0.459769, 0.439453, 0.475971, 0.491236, 0.131372, 0.127796, 0.178912, 0.345816, 0.439453, 0.422144, 0.491236, 0.641557, 0.179359, 0.178912, 0.453239, 0.420533, 0.475971, 0.491236, 0.685019, 0.681240, 0.178912, 0.345816, 0.420533, 0.592161, 0.491236, 0.641557, 0.681240, 0.821690, -0.160694, -0.119544, 0.205950, 0.216472, 0.127796, 0.131327, 0.345816, 0.355427, -0.119544, 0.208698, 0.216472, 0.430536, 0.131327, 0.345310, 0.355427, 0.528616, 0.205950, 0.216472, 0.269174, 0.512285, 0.345816, 0.355427, 0.592161, 0.675258, 0.216472, 0.430536, 0.512285, 0.738032, 0.355427, 0.528616, 0.675258, 0.809930, 0.127796, 0.131327, 0.345816, 0.355427, 0.422144, 0.462332, 0.641557, 0.659320, 0.131327, 0.345310, 0.355427, 0.528616, 0.462332, 0.620367, 0.659320, 0.776120, 0.345816, 0.355427, 0.592161, 0.675258, 0.641557, 0.659320, 0.821690, 0.894308, 0.355427, 0.528616, 0.675258, 0.809930, 0.659320, 0.776120, 0.894308, 1.001940]
maxLeafDepth = 2

########################## Python code  end #################################


def indent(s, num_spaces):
	s.lstrip('\n').rstrip(' \t')
	indent = ' '*num_spaces
	s = indent + s.replace('\n', '\n'+indent)
	return s

def sdf_code(leaf_index):
	sdf_start = 8*leaf_index
	glsl = '    '
	for n in range(0, 8):
		s = sdfs[sdf_start+n]
		glsl += 's%d = %f; ' % (n, s)
	return glsl


def descend(depth, left, right):

	if left>=right: 
		return indent('''
if (code==uint(%d))
{
%s  
    return;
}
else return;''' % (morton_codes[left], sdf_code(left)), 4+depth*2)
	
	middle = int(left+right)/2
	middleVal = morton_codes[middle]
	glsl = string.Template('''
if (code==uint($middleVal))
{
${SDF_MIDDLE}
    return;
}
else if (code<uint($middleVal))
{ 
    $${NEXT_LEFT} 
}
else 
{ 
    $${NEXT_RIGHT} 
}
''').safe_substitute({'middleVal': middleVal,
		              'SDF_MIDDLE': sdf_code(middle)})

	glsl_left  = descend(depth+1, left, middle-1)
	glsl_right = descend(depth+1, middle+1, right)
	glsl = string.Template(glsl).safe_substitute({'NEXT_LEFT': glsl_left, 'NEXT_RIGHT': glsl_right})

	return indent(glsl, 4+depth*2)

left = 0
right = len(morton_codes)-1


glsl =  string.Template('''
void binary_search(uint code, 
				   inout float s0,
				   inout float s1,
				   inout float s2,
				   inout float s3,
				   inout float s4,
				   inout float s5,
				   inout float s6,
				   inout float s7)
{
	${func}
}
''').safe_substitute({'func': descend(0, left, right)})
glsl = "".join([s for s in glsl.splitlines(True) if s.strip()])

glsl += string.Template('''
uint part1By2(uint x)
{
	x &= uint(1023);                              // 0x000003ff, x = ---- ---- ---- ---- ---- --98 7654 3210
	x = (x ^ (x << uint(16))) & uint(4278190335); // 0xff0000ff, x = ---- --98 ---- ---- ---- ---- 7654 3210
	x = (x ^ (x <<  uint(8))) & uint(50393103);   // 0x0300f00f, x = ---- --98 ---- ---- 7654 ---- ---- 3210
	x = (x ^ (x <<  uint(4))) & uint(51130563);   // 0x030c30c3, x = ---- --98 ---- 76-- --54 ---- 32-- --10
	x = (x ^ (x <<  uint(2))) & uint(153391689);  // 0x09249249, x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
	return x;
}

uint compact1By2(uint x)
{
	x &= uint(153391689);                         // 0x09249249, x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
	x = (x ^ (x >> uint(2)))  & uint(51130563);   // 0x030c30c3, x = ---- --98 ---- 76-- --54 ---- 32-- --10
	x = (x ^ (x >> uint(4)))  & uint(50393103);   // 0x0300f00f, x = ---- --98 ---- ---- 7654 ---- ---- 3210
	x = (x ^ (x >> uint(8)))  & uint(4278190335); // 0xff0000ff, x = ---- --98 ---- ---- ---- ---- 7654 3210
	x = (x ^ (x >> uint(16))) & uint(1023);       // 0x000003ff, x = ---- ---- ---- ---- ---- --98 7654 3210
	return x;
}

uint mortonEncode(uint x, uint y, uint z)
{
	return (part1By2(z)<<2) + (part1By2(y)<<1) + part1By2(x);
}

void mortonDecode(uint k, inout uint x, inout uint y, inout uint z)
{
	x = compact1By2(k >> 0);
	y = compact1By2(k >> 1);
	z = compact1By2(k >> 2);
}

uint encodeMorton(in vec3 P)
{
    return mortonEncode(uint(P.x*float(1<<9)), uint(P.y*float(1<<9)), uint(P.z*float(1<<9)));
}

vec3 decodeMorton(uint key)
{
	float norm = 1.0/float(1<<9);
	uint x, y, z;
	mortonDecode(key, x, y, z);
	vec3 lsP = vec3(float(x), float(y), float(z))*norm;
	return lsP;
}

uint genNodeCode(in vec3 lsP, uint depth)
{
    uint key = encodeMorton(lsP);
    uint d3 = uint(3)*depth;  // At depth d, a key has 3*d bits
    key >>= uint(27) - d3;    // Strip all but those 3*d bits from the key.
    key |= depth << uint(27);
    return key;
}

uint nodeDepth(uint nodeCode)
{
    return nodeCode >> uint(27);
}

float invNodeSize(uint depth)
{
    return float(uint(1) << depth);
}

vec3 nodeCorner(uint nodeCode)
{
    uint depth = nodeDepth(nodeCode); // Extract depth bits
    nodeCode &= ~(depth << uint(27)); // Zero depth bits
    uint d3 = uint(3)*depth;          // Construct the original Morton key
    uint key = nodeCode << (uint(27)-d3);
    vec3 tmp = decodeMorton(key);
    return decodeMorton(key);
}

float sdBox(vec3 X, vec3 bmin, vec3 bmax)                     
{                            
    vec3 d = abs(X-0.5*(bmin+bmax)) - 0.5*(bmax-bmin);
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));     
} 

#define MAX_OCTREE_DEPTH ${MAX_DEPTH}

float MESH(in vec3 X)
{
	vec3 O = vec3(${ORIGIN});
	float edge = ${EDGE};
	vec3 lsP = (X - O)/edge;

	// if X is outside octree cube, return distance to a cube just inside the octree
	vec3 E = vec3(edge);
	if ( sdBox(X, O, O+E) > 0.0 )
	{
		return sdBox(X, O+0.01*E, O+0.99*E);
	}
	
    uint depth = uint(MAX_OCTREE_DEPTH);
    uint code = genNodeCode(lsP, depth);
    float s0, s1, s2, s3, s4, s5, s6, s7;
    binary_search(code, s0, s1, s2, s3, s4, s5, s6, s7);
    
    vec3 C = nodeCorner(code);
    vec3 f2 = (lsP - C) * invNodeSize(nodeDepth(code));
    vec3 f1 = vec3(1.0) - f2;

    float mmm = s0; // x=f1, y=f1, z=f1
    float pmm = s1; // x=f2, y=f1, z=f1
    float mpm = s2; // x=f1, y=f2, z=f1
    float ppm = s3; // x=f2, y=f2, z=f1
    float mmp = s4; // x=f1, y=f1, z=f2
    float pmp = s5; // x=f2, y=f1, z=f2
    float mpp = s6; // x=f1, y=f2, z=f2
    float ppp = s7; // x=f2, y=f2, z=f2

    return ( f1.x * (f1.y*(f1.z*mmm + f2.z*mmp)  +
                     f2.y*(f1.z*mpm + f2.z*mpp)) +
             f2.x * (f1.y*(f1.z*pmm + f2.z*pmp)  +
                     f2.y*(f1.z*ppm + f2.z*ppp)) );
}
''').safe_substitute( {'ORIGIN': '%f, %f, %f'%(octree_origin[0], octree_origin[1], octree_origin[2]),
                       'EDGE': octree_edge,
                       'MAX_DEPTH': maxLeafDepth
	                      } )

print glsl







